How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I compared the files line-by-line until I came across a typo.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Let's say I added a few lines of code project, but, I deleted it and
    added something new. If I save the changes, then, I could just as easily
    lose all the code written previously. Having access to the entire history of
    a file relieves me of that problem, since, at any point in time I can restore
    my file to a previous(maybe better) version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros - Ability to choose when to commit, less numer of total commits, 
              only meaningful commits made
    Cons - Manual commits consume time

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git allows saving multiple files in one commit because it groups the files together
    in a repository. Google Docs, however, treats each file separately because it does
    not use repositories.

How can you use the commands git log and git diff to view the history of files?

    The "git log" command gives a history of all the commits made in a repository.
    The "git diff" command can be used to compare two commits to see the changes introduced.

How might using version control make you more confident to make changes that
could break something?

    I can revert to a previous(stable) version anytime and make necessary changes.

Now that you have your workspace set up, what do you want to try using Git for?

    I wanna try and use it with some of my Web Development stuff.